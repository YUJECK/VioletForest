//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InternalAssets/InputSystem/ActionsMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SatansForest
{
    public partial class @ActionMap: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ActionMap()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionsMap"",
    ""maps"": [
        {
            ""name"": ""WandererMode"",
            ""id"": ""6ed84127-3a92-4f49-b433-c4febbd9bdf9"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""90bad0fb-1730-45bd-aa61-b64cf5852387"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""bfa4ca3c-af7b-4beb-b42a-8e04a705c80a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8a00e2af-9f11-4ba9-b734-c1549b9dba0e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f3279b48-3c5b-49c5-98b8-ded92718d954"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b5ac08f2-fbb6-4428-8c60-82db41023bc0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b4b6b793-bc4d-4a9c-b00a-79be820e776a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // WandererMode
            m_WandererMode = asset.FindActionMap("WandererMode", throwIfNotFound: true);
            m_WandererMode_Movement = m_WandererMode.FindAction("Movement", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // WandererMode
        private readonly InputActionMap m_WandererMode;
        private List<IWandererModeActions> m_WandererModeActionsCallbackInterfaces = new List<IWandererModeActions>();
        private readonly InputAction m_WandererMode_Movement;
        public struct WandererModeActions
        {
            private @ActionMap m_Wrapper;
            public WandererModeActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_WandererMode_Movement;
            public InputActionMap Get() { return m_Wrapper.m_WandererMode; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WandererModeActions set) { return set.Get(); }
            public void AddCallbacks(IWandererModeActions instance)
            {
                if (instance == null || m_Wrapper.m_WandererModeActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_WandererModeActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }

            private void UnregisterCallbacks(IWandererModeActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
            }

            public void RemoveCallbacks(IWandererModeActions instance)
            {
                if (m_Wrapper.m_WandererModeActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IWandererModeActions instance)
            {
                foreach (var item in m_Wrapper.m_WandererModeActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_WandererModeActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public WandererModeActions @WandererMode => new WandererModeActions(this);
        public interface IWandererModeActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
    }
}
